{"meta":{"title":"White Worker","subtitle":"White Worker","description":"一个平凡而又爱折腾的工程师","author":"White Worker","url":"https://whiteworker.github.io","root":"/"},"pages":[],"posts":[{"title":"初探 ASP.NET Core 3.0 Publish 与 docker容器化","slug":"初探-asp-net-core-3.0-publish-&-docker","date":"2019-10-09T05:43:00.000Z","updated":"2020-09-23T03:54:34.084Z","comments":true,"path":"2019/10/09/初探-asp-net-core-3.0-publish-&-docker/","link":"","permalink":"https://whiteworker.github.io/2019/10/09/初探-asp-net-core-3.0-publish-&-docker/","excerpt":"[ASP.NET Core 3.0发布]ASP.NET Core 3.0发布后，发布的机制改变了，可以直接发布可执行文件，Docker容器化体积也变小了，在这里初探一下这些改变和变化注：Windows 和Docker publish 可能大小有些差异，但是整体趋势一致，这里偷懒使用的是windows发布 XD","text":"[ASP.NET Core 3.0发布]ASP.NET Core 3.0发布后，发布的机制改变了，可以直接发布可执行文件，Docker容器化体积也变小了，在这里初探一下这些改变和变化注：Windows 和Docker publish 可能大小有些差异，但是整体趋势一致，这里偷懒使用的是windows发布 XD New 一个最简单的项目和发布12$dotnet new mvc --auth None$dotnet publish -r centos.7-x64 -c Release 发布完后大小为96.5 MB这里为了快速测试，直接发布后拷贝 1234567FROM mcr.microsoft.com/dotnet/core/runtime:3.0WORKDIR /appCOPY bin/Release/netcoreapp3.0/centos.7-x64/publish .EXPOSE 5000CMD [\"./dotnet3\"] 走一个 1docker build -t dotnet3:1.0.0 . 1$docker images REPOSITORY TAG SIZE dotnet3 1.0.0 290MB 还是那么臃肿，看看有没什么新特性可以改进一下 改进打开程序集链接分析.NET core 3.0 SDK 随附了一种工具，可以通过分析 IL 并剪裁未使用的程序集来减小应用的大小。dotnet3.csproj 123&lt;PropertyGroup&gt; &lt;PublishTrimmed&gt;true&lt;/PublishTrimmed&gt;&lt;/PropertyGroup&gt; 或者在命令行加上 这里顺便加上单个文件发布和自包含1$dotnet publish -r centos.7-x64 -c Release /p:PublishSingleFile=true /p:PublishTrimmed=true --self-contained true 发布完后大小为56.7 MB 镜像对比这个将docker镜像替换成自包含的镜像，大小减少很多 看看这两个镜像的分层就知道，mcr.microsoft.com/dotnet/core/runtime:3.0 的第一二层就是mcr.microsoft.com/dotnet/core/runtime-deps:3.0 1234567FROM mcr.microsoft.com/dotnet/core/runtime-deps:3.0WORKDIR /appCOPY bin/Release/netcoreapp3.0/centos.7-x64/publish .EXPOSE 5000CMD [\"./dotnet3\"] 结果12docker build -t dotnet3:1.0.1 .docker run --rm --name dotnet3 -it -p 5000:5000 dotnet3:1.0.1 REPOSITORY TAG SIZE dotnet3 1.0.1 170MB dotnet3 1.0.0 290MB 容器化相对于Dotnet Core2.2版本已经有很大进步了，但是相对于其他语言例如go语言，还是远远不足（golang build from scratch 静态编译只需 39M左右） 参考dotnet-core-3-0","categories":[{"name":"ASP.NET Core","slug":"asp-net-core","permalink":"https://whiteworker.github.io/categories/asp-net-core/"}],"tags":[{"name":"ASP.NET Core","slug":"asp-net-core","permalink":"https://whiteworker.github.io/tags/asp-net-core/"},{"name":"C#","slug":"c","permalink":"https://whiteworker.github.io/tags/c/"},{"name":"Docker","slug":"docker","permalink":"https://whiteworker.github.io/tags/docker/"}],"author":"White Worker"},{"title":"ASP.NET Core Serilog ElasticSearch Format","slug":"asp-net-core-serilog-elasticsearch-format","date":"2019-08-09T05:35:53.000Z","updated":"2020-09-23T03:54:34.082Z","comments":true,"path":"2019/08/09/asp-net-core-serilog-elasticsearch-format/","link":"","permalink":"https://whiteworker.github.io/2019/08/09/asp-net-core-serilog-elasticsearch-format/","excerpt":"[ASP.NET Core 使用Serilog Format ElasticSearch]在使用微服务框架EFK收集ASP.NET Core日志的时候，默认Console.Log 打印出来的Log被ElasticSearch+Fluentd收集后颜色属性会产生乱码（低版本ES会直接报错)本篇将介绍 使用Serilog的ElasticSearch Format收集日志","text":"[ASP.NET Core 使用Serilog Format ElasticSearch]在使用微服务框架EFK收集ASP.NET Core日志的时候，默认Console.Log 打印出来的Log被ElasticSearch+Fluentd收集后颜色属性会产生乱码（低版本ES会直接报错)本篇将介绍 使用Serilog的ElasticSearch Format收集日志 1. 安装NuGet包dotnet add package Serilog.AspNetCoredotnet add package Serilog.Sinks.Consoledotnet add package Serilog.Sinks.ElasticSearch 2. StartupProgram.cs 1234567891011121314151617public static IWebHostBuilder CreateWebHostBuilder(string[] args) =&gt; WebHost.CreateDefaultBuilder(args) .UseSerilog((ctx, config) =&gt;&#123; config .MinimumLevel.Information() .Enrich.FromLogContext(); if (ctx.HostingEnvironment.IsDevelopment()) &#123; config.WriteTo.Console(); &#125; else &#123; config.WriteTo.Console(new ElasticsearchJsonFormatter()); &#125;&#125;) 参考writing-logs-to-elasticsearch-with-fluentd-using-serilog-in-asp-net-core","categories":[{"name":"ASP.NET Core","slug":"asp-net-core","permalink":"https://whiteworker.github.io/categories/asp-net-core/"}],"tags":[{"name":"ASP.NET Core","slug":"asp-net-core","permalink":"https://whiteworker.github.io/tags/asp-net-core/"},{"name":"C#","slug":"c","permalink":"https://whiteworker.github.io/tags/c/"},{"name":"Log","slug":"log","permalink":"https://whiteworker.github.io/tags/log/"},{"name":"ElasticSearch","slug":"elasticsearch","permalink":"https://whiteworker.github.io/tags/elasticsearch/"},{"name":"Serilog","slug":"serilog","permalink":"https://whiteworker.github.io/tags/serilog/"}],"author":"White Worker"}]}